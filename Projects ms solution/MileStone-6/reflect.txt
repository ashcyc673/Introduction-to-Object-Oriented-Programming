For this project, I learned how to apply everything that I have learned so far about OOP such as polymorphism, inheritance, etc … 
For me the hardest part was to figure out the way to get the program to deal with different kind of data in the comma separated mode to work because in MS5 and MS6 these data are different in the way they were formatted. At first, I did not use the getline function to split the data base on the delimiter of comma, so I develop my own function to do this. This is really complex because I don’t know how to return an array of string to the main function therefore the initial code was really hard to read. It is not because I don’t know how to use the getline function, but I want to learn how to make it. So, in this project, the MS5 was designed to read the vehicle data string to add the information of the vehicle into the program without using the getline. In addition, because the custom function did not have the ability to eliminate the first character in the csv file to determine if the vehicle is a car or motorcycle, I write a function called shiftString. This function will take the string in the csv file and remvove the first character therefore the >> operator and the read function can be used to add the vehicle data into the program which was designed in MS5 and MS4. By doing this project I also learn how to use the SOLID principle even though it is not perfect yet, but I found that this project I should apply the single responsibility theory and the dependency injection into this project more. I find that when I make the code for the interface and make the test of the program based on the interface, it makes life to be easier because since everything is not relate to each other, then it will be easier to fix and find bugs. In general, this code still needs to be improved especially I need to make it into smaller function since I can feel that some function could be easier to do so like loadData. This function needs to find the empty space to add the new vehicle, therefore, I have created a function to do so called getEmptyPosition to help the load function to add the new vehicle if there is still space. Even though I have tried to make everything should be as modular as possible and I tried to reuse the code, but I found that sometime these theories will not be right at some point, for example, with the >> operator and the read function in MS5. I designed these function to use the read function of the base class and expand the function to fit with different object such as Car or Motorcycle but doing so make the code really coupling and they require a special middleman to keep the data and store it inside the base class which is not good. Therefore, it is better to write these functions different from each other and sometime, not inherit some small part of the base class will help the code to be easier to work with. 
